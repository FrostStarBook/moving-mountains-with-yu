/* Autogenerated file. Do not edit manually. */

import { Account, AccountInterface } from "starknet";
import { DojoProvider } from "@dojoengine/core";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export interface AccountProps {
    account: Account | AccountInterface;
}

export async function setupWorld(provider: DojoProvider) {
    function actions() {
        const contract_name = "actions";

        const spawn = async ({ account }: { account: AccountInterface }) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "spawn",
                    []
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };

        const click = async ({ account }: any) => {
            try {
                return await provider.execute(account, contract_name, "click", []);
            } catch (error) {
                console.error("Error executing move:", error);
                throw error;
            }
        };

        const upgrade_base = async ({ account }: any) => {
            try {
                return await provider.execute(account, contract_name, "upgrade_base", []);
            } catch (error) {
                console.error("Error executing move:", error);
                throw error;
            }
        };

        const buy_architecture = async ({ account, mold }: any) => {
            try {
                return await provider.execute(account, contract_name, "buy_architecture", [mold]);
            } catch (error) {
                console.error("Error executing move:", error);
                throw error;
            }
        };

        const upgrade_architecture = async ({ account }: any) => {
            try {
                return await provider.execute(account, contract_name, "upgrade_architecture", []);
            } catch (error) {
                console.error("Error executing move:", error);
                throw error;
            }
        };

        const auto = async ({ account }: any) => {
            try {
                return await provider.execute(account, contract_name, "auto", []);
            } catch (error) {
                console.error("Error executing move:", error);
                throw error;
            }
        };


        return { spawn, click, upgrade_base, buy_architecture, upgrade_architecture, auto };
    }
    return {
        actions: actions(),
    };
}
